---
import { getCollection } from "astro:content";
import Navbar from "../components/Navbar.astro";
import Layout from "../layouts/Layout.astro";
import AboutHero from "../components/about-components/AboutHero.astro";
import Accordion from "../components/about-components/Accordion";
import MeetTheTeam from "../components/about-components/MeetTheTeam";
import Footer from "~/components/Footer.astro";
const founderQuotes = await getCollection("founder");
---

<Layout title="Lunar ventures">
  <main>
    <header>
      <Navbar />
    </header>

    <!-- Hero section -->
    <AboutHero />

    <!-- Our Investment Philosophy -->
    <section class="">
      <div class="flex flex-col items-center gap-4 justify-center mb-12">
        <h2
          class="text-4xl text-center font-medium text-black mb-8 dark:text-white"
        >
          Our Investment Philosophy
        </h2>
        <p class="text-[#6B7280] text-lg px-4 lg:px-28 text-center">
          Our philosophy is simple. We find companies we believe in and then put
          our whole team behind them. We are a team of engineers, data
          scientists, founders, operators, and investors. We have PhDs,
          colleague drop outs.
        </p>
      </div>
    </section>
    <section>
      <!-- <Accordion client:load /> -->
    </section>
    <!-- accordion section -->
    <section class="mb-12">
      <div>
        <h2
          class="text-4xl bg-white dark:bg-white/5 dark:text-white p-2 font-medium text-black inline-block px-4 rounded-sm mb-6"
        >
          How we help
        </h2>
        <div>
          <Accordion client:load />
        </div>
      </div>
    </section>

    <!-- meet the team -->
    <section class="mb-12">
      <MeetTheTeam client:load />
    </section>

    <!-- slider  -->
    <div class="relative max-w-5xl mx-auto rounded-xl pt-24 mb-24">
      <h2 class="text-4xl font-medium text-center mb-12 dark:text-white">
        What our founders say about us
      </h2>
      <div
        x-data="{
          currentSlide: 0,
          skip: 1,
          atBeginning: false,
          atEnd: false,
          autoSlideInterval: null,
          startAutoSlide() {
              this.autoSlideInterval = setInterval(() => {
                  this.next();
              }, 2500);
          },
          stopAutoSlide() {
              clearInterval(this.autoSlideInterval);
          },
          goToSlide(index) {
              let slider = this.$refs.slider;
              let offset = slider.firstElementChild.getBoundingClientRect().width;
              slider.scrollTo({ left: offset * index, behavior: 'smooth' });
          },
          next() {
              let slider = this.$refs.slider;
              let current = slider.scrollLeft;
              let offset = slider.firstElementChild.getBoundingClientRect().width;
              let maxScroll = offset * (slider.children.length - 1);
  
              current + offset >= maxScroll ? slider.scrollTo({ left: 0, behavior: 'smooth' }) : slider.scrollBy({ left: offset * this.skip, behavior: 'smooth' });
          },
          prev() {
              let slider = this.$refs.slider;
              let current = slider.scrollLeft;
              let offset = slider.firstElementChild.getBoundingClientRect().width;
              let maxScroll = offset * (slider.children.length - 1);
  
              current <= 0 ? slider.scrollTo({ left: maxScroll, behavior: 'smooth' }) : slider.scrollBy({ left: -offset * this.skip, behavior: 'smooth' });
          },
          updateButtonStates() {
              let slideEls = this.$el.parentElement.children;
              this.atBeginning = slideEls[0] === this.$el;
              this.atEnd = slideEls[slideEls.length-1] === this.$el;
          },
          focusableWhenVisible: {
              'x-intersect:enter'() { this.$el.removeAttribute('tabindex'); },
              'x-intersect:leave'() { this.$el.setAttribute('tabindex', '-1'); }
          },
          disableNextAndPreviousButtons: {
              'x-intersect:enter.threshold.05'() { this.updateButtonStates(); },
              'x-intersect:leave.threshold.05'() { this.updateButtonStates(); }
          },
          updateCurrentSlide() {
              let slider = this.$refs.slider;
              let offset = slider.firstElementChild.getBoundingClientRect().width;
              this.currentSlide = Math.round(slider.scrollLeft / offset);
          }
      }"
        x-init="startAutoSlide()"
        @mouseover="stopAutoSlide()"
        @mouseout="startAutoSlide()"
        class="flex flex-col w-full"
      >
        <div
          x-on:keydown.right="next"
          x-on:keydown.left="prev"
          tabindex="0"
          role="region"
          aria-labelledby="carousel-label"
          class="flex space-x-6 rounded-xl"
        >
          <h2 id="carousel-label" class="sr-only" hidden>Carousel</h2>

          <span id="carousel-content-label" class="sr-only" hidden
            >Carousel</span
          >

          <ul
            x-ref="slider"
            @scroll="updateCurrentSlide"
            tabindex="0"
            role="listbox"
            aria-labelledby="carousel-content-label"
            class="flex w-full overflow-x-hidden snap-x snap-mandatory"
          >
            {
              founderQuotes.map(({ data }) => (
                <li
                  x-bind="disableNextAndPreviousButtons"
                  class="flex flex-col items-center justify-center w-full p-0 shrink-0 snap-start rounded-xl"
                  role="option"
                >
                  <div class="max-w-[650px] mx-auto flex flex-col mb-12">
                    <div class="max-w-[650px] text-center">
                      <svg
                        width="32"
                        height="20"
                        viewBox="0 0 32 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M14.5918 13.0547C14.5918 14.349 14.2956 15.5065 13.7031 16.5273C13.1107 17.5391 12.304 18.3411 11.2832 18.9336C10.2624 19.5169 9.10938 19.8086 7.82422 19.8086C6.49349 19.8086 5.27214 19.4805 4.16016 18.8242C3.05729 18.168 2.17318 17.2201 1.50781 15.9805C0.842448 14.7409 0.509766 13.2415 0.509766 11.4824C0.509766 9.9694 0.774089 8.56576 1.30273 7.27148C1.83138 5.97721 2.5651 4.83789 3.50391 3.85352C4.16927 3.15169 4.91667 2.54102 5.74609 2.02148C6.57552 1.50195 7.45052 1.08724 8.37109 0.777344C8.71745 0.667969 9.00456 0.590495 9.23242 0.544922C9.4694 0.490234 9.71549 0.462891 9.9707 0.462891C10.3262 0.462891 10.6133 0.563151 10.832 0.763672C11.0508 0.955078 11.1602 1.20573 11.1602 1.51562C11.1602 1.67969 11.1283 1.83008 11.0645 1.9668C11.0098 2.0944 10.9277 2.20378 10.8184 2.29492C10.7181 2.38607 10.5859 2.4681 10.4219 2.54102C10.2669 2.60482 10.0755 2.67318 9.84766 2.74609C9.07292 2.95573 8.34375 3.2474 7.66016 3.62109C6.98568 3.99479 6.375 4.42318 5.82812 4.90625C5.29036 5.38932 4.83008 5.91797 4.44727 6.49219C4.06445 7.06641 3.7819 7.66797 3.59961 8.29688H4.05078C4.61589 7.66797 5.26758 7.19857 6.00586 6.88867C6.74414 6.56966 7.53711 6.41016 8.38477 6.41016C9.55143 6.41016 10.6042 6.70638 11.543 7.29883C12.4818 7.88216 13.2246 8.67513 13.7715 9.67773C14.3184 10.6803 14.5918 11.806 14.5918 13.0547ZM31.4902 13.0547C31.4902 14.349 31.194 15.5065 30.6016 16.5273C30.0182 17.5391 29.2161 18.3411 28.1953 18.9336C27.1745 19.5169 26.0215 19.8086 24.7363 19.8086C23.3965 19.8086 22.1706 19.4805 21.0586 18.8242C19.9557 18.168 19.0716 17.2201 18.4062 15.9805C17.75 14.7409 17.4219 13.2415 17.4219 11.4824C17.4219 9.9694 17.6816 8.56576 18.2012 7.27148C18.7298 5.97721 19.4635 4.83789 20.4023 3.85352C21.0677 3.15169 21.8151 2.54102 22.6445 2.02148C23.474 1.50195 24.349 1.08724 25.2695 0.777344C25.6159 0.667969 25.903 0.590495 26.1309 0.544922C26.3587 0.490234 26.6094 0.462891 26.8828 0.462891C27.2383 0.462891 27.5208 0.563151 27.7305 0.763672C27.9492 0.955078 28.0586 1.20573 28.0586 1.51562C28.0586 1.67969 28.0312 1.83008 27.9766 1.9668C27.9219 2.0944 27.8353 2.20378 27.7168 2.29492C27.6257 2.38607 27.498 2.4681 27.334 2.54102C27.1699 2.60482 26.974 2.67318 26.7461 2.74609C25.9714 2.95573 25.2422 3.2474 24.5586 3.62109C23.8841 3.99479 23.2734 4.42318 22.7266 4.90625C22.1888 5.38932 21.7285 5.91797 21.3457 6.49219C20.9629 7.06641 20.6803 7.66797 20.498 8.29688H20.9492C21.5052 7.66797 22.1569 7.19857 22.9043 6.88867C23.6517 6.56966 24.4447 6.41016 25.2832 6.41016C26.459 6.41016 27.5117 6.70638 28.4414 7.29883C29.3802 7.88216 30.123 8.67513 30.6699 9.67773C31.2168 10.6803 31.4902 11.806 31.4902 13.0547Z"
                          fill="#D92977"
                        />
                      </svg>
                    </div>
                    <p class="text-xl md:text-3xl text-gray-500 text-center px-5 max-w-[650px]">
                      {data.quote}
                    </p>
                    <div class="text-3xl max-w-[650px] text-indigo-500 text-right flex items-center justify-end leading-tight -mt-3">
                      <svg
                        width="32"
                        height="20"
                        viewBox="0 0 32 20"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M0.509766 7.2168C0.509766 5.92253 0.80599 4.76953 1.39844 3.75781C1.99089 2.74609 2.79297 1.94401 3.80469 1.35156C4.82552 0.759115 5.98307 0.462891 7.27734 0.462891C8.60807 0.462891 9.82487 0.791016 10.9277 1.44727C12.0397 2.10352 12.9284 3.05599 13.5938 4.30469C14.2591 5.54427 14.5918 7.03906 14.5918 8.78906C14.5918 10.3021 14.3275 11.7057 13.7988 13C13.2702 14.2943 12.5365 15.4382 11.5977 16.4316C10.9323 17.1243 10.1849 17.735 9.35547 18.2637C8.52604 18.7832 7.65104 19.1979 6.73047 19.5078C6.38411 19.6081 6.09701 19.6855 5.86914 19.7402C5.64128 19.7858 5.38607 19.8086 5.10352 19.8086C4.75716 19.8086 4.47461 19.7129 4.25586 19.5215C4.04622 19.321 3.94141 19.0658 3.94141 18.7559C3.94141 18.5918 3.96875 18.446 4.02344 18.3184C4.07812 18.1816 4.16471 18.0677 4.2832 17.9766C4.38346 17.8854 4.51562 17.8079 4.67969 17.7441C4.84375 17.6712 5.03516 17.5983 5.25391 17.5254C6.03776 17.3158 6.76693 17.0286 7.44141 16.6641C8.11589 16.2904 8.72201 15.862 9.25977 15.3789C9.80664 14.8867 10.2669 14.3535 10.6406 13.7793C11.0234 13.2051 11.3105 12.6035 11.502 11.9746H11.0508C10.4948 12.6035 9.8431 13.0775 9.0957 13.3965C8.34831 13.7064 7.55534 13.8613 6.7168 13.8613C5.54102 13.8613 4.48372 13.5697 3.54492 12.9863C2.61523 12.403 1.87695 11.61 1.33008 10.6074C0.783203 9.5957 0.509766 8.46549 0.509766 7.2168ZM17.4219 7.2168C17.4219 5.92253 17.7135 4.76953 18.2969 3.75781C18.8893 2.74609 19.6914 1.94401 20.7031 1.35156C21.724 0.759115 22.8815 0.462891 24.1758 0.462891C25.5156 0.462891 26.737 0.791016 27.8398 1.44727C28.9427 2.10352 29.8268 3.05599 30.4922 4.30469C31.1576 5.54427 31.4902 7.03906 31.4902 8.78906C31.4902 10.3021 31.2259 11.7057 30.6973 13C30.1686 14.2943 29.4303 15.4382 28.4824 16.4316C27.8262 17.1243 27.0788 17.735 26.2402 18.2637C25.4108 18.7832 24.5404 19.1979 23.6289 19.5078C23.2826 19.6081 22.9909 19.6855 22.7539 19.7402C22.526 19.7858 22.2845 19.8086 22.0293 19.8086C21.6738 19.8086 21.3867 19.7129 21.168 19.5215C20.9492 19.321 20.8398 19.0658 20.8398 18.7559C20.8398 18.5918 20.8672 18.446 20.9219 18.3184C20.9857 18.1816 21.0723 18.0677 21.1816 17.9766C21.2819 17.8854 21.4095 17.8079 21.5645 17.7441C21.7285 17.6712 21.9245 17.5983 22.1523 17.5254C22.9271 17.3158 23.6562 17.0286 24.3398 16.6641C25.0234 16.2904 25.6341 15.862 26.1719 15.3789C26.7096 14.8867 27.1699 14.3535 27.5527 13.7793C27.9355 13.2051 28.2181 12.6035 28.4004 11.9746H27.9492C27.3841 12.6035 26.7324 13.0775 25.9941 13.3965C25.2559 13.7064 24.4629 13.8613 23.6152 13.8613C22.4486 13.8613 21.3958 13.5697 20.457 12.9863C19.5273 12.403 18.7891 11.61 18.2422 10.6074C17.6953 9.5957 17.4219 8.46549 17.4219 7.2168Z"
                          fill="#D92977"
                        />
                      </svg>
                    </div>
                  </div>
                  <div class="flex gap-5">
                    <img
                      src={data.profilePic}
                      class="h-6 w-6 rounded-full bg-orange-500 dark:text-white"
                      alt=""
                    />
                    <span class="font-bold dark:text-white/90 ">
                      {data.name} /{" "}
                      <span class="font-normal">{data.designation}</span>
                    </span>
                  </div>
                </li>
              ))
            }
          </ul>
        </div>

        <!-- Indicators -->

        <div class="absolute z-10 w-full -bottom-6">
          <div class="flex justify-center space-x-2">
            <template
              x-for="(slide, index) in Array.from($refs.slider.children)"
              :key="index"
            >
              <button
                @click="goToSlide(index)"
                :class="{'bg-gray-500': currentSlide === index, 'bg-gray-300': currentSlide !== index}"
                class="w-3 h-1 rounded-full lg:w-5 hover:bg-gray-400 focus:outline-none focus:bg-gray-400"
              ></button>
            </template>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <Footer />
  </main>
</Layout>
